## Reading questions

The first two questions are questions from last time, but worth
revisiting.  These are up rather late, but do what you can, and come
with questions for class!

1.  The class cluster consists of eight nodes and fifteen Xeon Phi
    accelerator boards.  Based on an online search for information on
    these systems, what do you think is the theoretical peak flop rate
    (double-precision floating point operations per second)?  Show how
    you computed this, and give URLs for where you got the parameters
    in your calculation.  (We will return to this question again after
    we cover some computer architecture.)
    
    How to compute flop rate:
    http://www.novatte.com/our-blog/197-how-to-calculate-peak-theoretical-performance-of-a-cpu-based-hpc-system    
    According to the page above, Intel E5-2600v3 series CPUs have 16 instructions per cycle(due to AVX2.0)
    http://ark.intel.com/products/83352/Intel-Xeon-Processor-E5-2620-v3-15M-Cache-2_40-GHz    
    It tells us that E5 2620 v3 is 2.4GHz. And we have 8 nodes and 12 cores per node
    so flop rate=2.4G*8*12*16=3686.4 GFLOPS

    For accelerator boards, 
    http://ark.intel.com/products/71992/Intel-Xeon-Phi-Coprocessor-5110P-8GB-1_053-GHz-60-core?q=Xeon%20phi%205110p
    It's 1.053GHz, and as it is neither AVX2.0 nor AVX, so it has 4 instructions per cycle
    And we have 15 boards and 60 cores for each
    flop rate=1.053G*15*60*4=3790.8 GFLOPS

    So overall it's 7.4772 TFLOPS

2.  What is the approximate theoretical peak flop rate for your own machine?

    My laptop is MSI gs60. According to my device manager, my laptop has 8-core Intel i7-5700HQ @ 2.70GHz
    http://ark.intel.com/products/87716/Intel-Core-i7-5700HQ-Processor-6M-Cache-up-to-3_50-GHz?q=i7%205700HQ
    It is also AVX2.0,so I guess it has 16 instructions per cycle.
    flop rate=2.7G*8*16=345.6 GFLOPS

3.  Suppose there are t tasks that can be executed in a pipeline
    with p stages.  What is the speedup over serial execution of the
    same tasks?
	
    Assume one stage will take time t0,
    overall time for serial execution will be t0*p*t.
    
    For pipelined, the overall time will be t0*(p-1)+t0*t
    As we add one task,the time will only increase by t0.
   
    So the speedup will be t0*p*t/(t0*(p-1)+t0*t)=p*t/(t+p-1)
    So potential speedup = p


4.  Consider the following list of tasks (assume they can't be pipelined):

      compile GCC (1 hr)
      compile OpenMPI (0.5 hr) - depends on GCC
      compile OpenBLAS (0.25 hr) - depends on GCC
      compile LAPACK (0.5 hr) - depends on GCC and OpenBLAS
      compile application (0.5 hr) - depends on GCC, OpenMPI,
        OpenBLAS, LAPACK

    What is the minimum serial time between starting to compile and having
    a compiled application?  What is the minimum parallel time given
    an arbitrary number of processors?

    Serial:2.75hr
    Parallel:2.25hr

5.  Clone the membench repository from GitHub:

       git clone git@github.com:cornell-cs5220-f15/membench.git

    On your own machine, build `membench` and generate the associated
    plots; for many of you, this should be as simple as typing `make`
    at the terminal (though I assume you have Python with pandas and
    Matplotlib installed; see also the note about Clang and OpenMP
    in the leading comments of the Makefile).  Look at the output file
    timings-heat.pdf; what can you tell about the cache architecture
    on your machine from the plot?

    Trouble in importing pandas. When I pip install pandas, it tells me that it has been installed
    But when I enter python and then import pandas, it fails. Really weird.
    Besides, I use cygwin and anaconda.

6.  From the cloned repository, check out the totient branch:

       git checkout totient

    You may need to move generated files out of the way to do this.
    If you prefer, you can also look at the files on GitHub.  Either
    way, repeat the exercise of problem 5.  What can you tell about
    the cache architecture of the totient nodes?

7.  Implement the following three methods of computing the centroid
    of a million two-dimensional coordinates (double precision).
    Time and determine which is faster:

    a.  Store an array of (x,y) coordinates; loop i and simultaneously
        sum the xi and yi

    b.  Store an array of (x,y) coordinates; loop i and sum the xi,
        then sum the yi in a separate loop

    c.  Store the xi in one array, the yi in a second array.
        Sum the xi, then sum the yi.

    I recommend doing this on the class cluster using the Intel
    compiler.  To do this, run "module load cs5220" and run (e.g.)

        icc -o centroid centroid.c
